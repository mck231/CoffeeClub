// <auto-generated />
using System;
using CofeeClub.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CofeeClub.Persistence.Migrations
{
    [DbContext(typeof(CoffeeClubDbContext))]
    [Migration("20230621213141_Start-Migration")]
    partial class StartMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoffeeClub.Domain.Entities.Announcement", b =>
                {
                    b.Property<Guid>("AnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AnnouncementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AnnouncementId");

                    b.HasIndex("TeamId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("CoffeeClub.Domain.Entities.Coffee", b =>
                {
                    b.Property<Guid>("CoffeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("PurchasingLink")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasAnnotation("RegularExpression", "^(http|https)://([\\w-]+\\.)+[\\w-]+(/[\\w- ./?%&=]*)?$");

                    b.Property<string>("RoastType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasAnnotation("RegularExpression", "^\\d+(\\s+(oz|lb))$");

                    b.HasKey("CoffeeId");

                    b.ToTable("Coffees", (string)null);
                });

            modelBuilder.Entity("CoffeeClub.Domain.Entities.CoffeeGroup", b =>
                {
                    b.Property<Guid>("CoffeeGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CoffeeGroupId");

                    b.ToTable("CoffeeGroups");
                });

            modelBuilder.Entity("CoffeeClub.Domain.Entities.GroupCoffeeVoting", b =>
                {
                    b.Property<Guid>("GroupCoffeeVotingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoffeeGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoffeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VotingSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GroupCoffeeVotingId");

                    b.HasIndex("CoffeeGroupId");

                    b.HasIndex("CoffeeId");

                    b.HasIndex("VotingSessionId");

                    b.ToTable("GroupCoffeeVotings");
                });

            modelBuilder.Entity("CoffeeClub.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VotingSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PaymentId");

                    b.HasIndex("VotingSessionId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("CoffeeClub.Domain.Entities.Team", b =>
                {
                    b.Property<Guid>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeamId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("CoffeeClub.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsLeader")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId");

                    b.HasIndex("TeamId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CoffeeClub.Domain.Entities.Vote", b =>
                {
                    b.Property<Guid>("VoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoffeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VotingSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VoteId");

                    b.HasIndex("CoffeeId");

                    b.HasIndex("UserId");

                    b.HasIndex("VotingSessionId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("CoffeeClub.Domain.Entities.VotingSession", b =>
                {
                    b.Property<Guid>("VotingSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoffeeGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WinningCoffeeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VotingSessionId");

                    b.HasIndex("CoffeeGroupId");

                    b.HasIndex("TeamId");

                    b.HasIndex("WinningCoffeeId");

                    b.ToTable("VoteSessions");
                });

            modelBuilder.Entity("CoffeeClub.Domain.Entities.Announcement", b =>
                {
                    b.HasOne("CoffeeClub.Domain.Entities.Team", "Team")
                        .WithMany("Announcements")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CoffeeClub.Domain.Entities.GroupCoffeeVoting", b =>
                {
                    b.HasOne("CoffeeClub.Domain.Entities.CoffeeGroup", "CoffeeGroup")
                        .WithMany("GroupCoffeeVotings")
                        .HasForeignKey("CoffeeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeClub.Domain.Entities.Coffee", "Coffee")
                        .WithMany()
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeClub.Domain.Entities.VotingSession", "VotingSession")
                        .WithMany("GroupCoffeeVotings")
                        .HasForeignKey("VotingSessionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Coffee");

                    b.Navigation("CoffeeGroup");

                    b.Navigation("VotingSession");
                });

            modelBuilder.Entity("CoffeeClub.Domain.Entities.Payment", b =>
                {
                    b.HasOne("CoffeeClub.Domain.Entities.VotingSession", "VotingSession")
                        .WithMany()
                        .HasForeignKey("VotingSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VotingSession");
                });

            modelBuilder.Entity("CoffeeClub.Domain.Entities.User", b =>
                {
                    b.HasOne("CoffeeClub.Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("CoffeeClub.Domain.Entities.Vote", b =>
                {
                    b.HasOne("CoffeeClub.Domain.Entities.Coffee", "Coffee")
                        .WithMany()
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoffeeClub.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeClub.Domain.Entities.VotingSession", "VotingSession")
                        .WithMany("Votes")
                        .HasForeignKey("VotingSessionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Coffee");

                    b.Navigation("User");

                    b.Navigation("VotingSession");
                });

            modelBuilder.Entity("CoffeeClub.Domain.Entities.VotingSession", b =>
                {
                    b.HasOne("CoffeeClub.Domain.Entities.CoffeeGroup", "CoffeeGroup")
                        .WithMany("VotingSessions")
                        .HasForeignKey("CoffeeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeClub.Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoffeeClub.Domain.Entities.Coffee", "WinningCoffee")
                        .WithMany()
                        .HasForeignKey("WinningCoffeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoffeeGroup");

                    b.Navigation("Team");

                    b.Navigation("WinningCoffee");
                });

            modelBuilder.Entity("CoffeeClub.Domain.Entities.CoffeeGroup", b =>
                {
                    b.Navigation("GroupCoffeeVotings");

                    b.Navigation("VotingSessions");
                });

            modelBuilder.Entity("CoffeeClub.Domain.Entities.Team", b =>
                {
                    b.Navigation("Announcements");
                });

            modelBuilder.Entity("CoffeeClub.Domain.Entities.VotingSession", b =>
                {
                    b.Navigation("GroupCoffeeVotings");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
